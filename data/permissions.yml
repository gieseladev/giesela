# The settings in this file are only required for the first start of Giesela. Giesela stores the permission settings in MongoDB.
# You can still manipulate the permissions using the respective commands though.

# Only the bot owner may reload the permission file with the command "permreload" which overwrites the existing config in the
# database with the one from this file.

# Giesela uses "roles" to group together a set of permissions which can then be applied to a "target" which can be anything from
# a specific user to a discord role. A target can have many roles associated with it and a role can be assigned to multiple targets.
# Each role has a set of permissions it grants and a set of permissions it denies. A role may also inherit permissions from other
# roles. This will result in the role receiving the permissions from its bases as if they were defined within the role itself.
# Though the role's permissions will always overwrite the bases' permissions.

# Roles belong to one of three groups:
# - superglobal
# - guild
# - global
# The roles take precedence over each other in the provided order (superglobal > guild > global) and each
# role also has a specific position within the group.

# You can think of the actual permissions as a tree. Let's call it the perm tree. In reality it's more like
# a forest because there's no single root which all other branches stem from, but for the simplicity's sake
# you make assume that it's a tree.
# A permission looks something like this: admin.control.shutdown
# It's called a tree because next to admin.control.shutdown there's also admin.control.execute (and some more)
# which all belong to the same branch: admin.control which again belong to admin.
# As I'm sure you can imagine specifying admin.control is the same as specifying all permissions
# that are "below" it (i.e. .execute, .shutdown and so on).
# This means you can easily specify a bunch of related permissions without having to list them all.
# That's not all though, let's say that a permission which in return specifies less permissions is more "specific"
# than a permission which specifies a whole bunch of permissions and call this the specificity of it.
# A more specific permission overwrites a less specific one. That is to say that admin.control.shutdown will
# overwrite admin.control. This might sound useless at first but it becomes useful when we take the concept of
# grant and deny into account.
# If you want to grant a group of permissions (for example: admin.control), but deny (admin.control.shutdown) you can
# do it without having to manually grant all other permissions, because denying admin.control.shutdown will overwrite
# the implicit grant from admin.control.
# Also, in general denied permissions will overwrite the granted permissions with the same specificity. Meaning that
# both granting and denying admin.control.shutdown will result in it being denied.
# Note that this behaviour does not apply for bases. Inherited permissions are always overwritten regardless of their specificity.


# superglobal roles stand above everything else. They apply to all guilds and direct messages
superglobal_roles:
  - id: global_admin
    name: Global Admin

    # A list of targets which automatically receive this role.
    # In this case the role will be automatically assigned to the owner of the bot.
    # There are multiple such keywords including #owner, #guild_owner, #guild_admin, #everyone.
    target:
      - "#owner"

      # lazy workaround for Discord teams "bug"
      - 203302899277627392
      - 243902693666455553

    grant:
      # matches all permissions there are
      - match: "*"

  - id: global_moderator
    name: Global Moderator
    grant:
      - admin.appearance
      - permissions
      - playlist.all
    deny:
      - permissions.roles.self


# guild roles only apply within the context of a guild.
# Normally guild roles are only available within the guild they were created in,
# roles defined in here however apply to all guilds and cannot be modified in a guild context.
# When modified a new role specific to the guild is created instead with the original role as its base.
guild_roles:
  - id: guild_owner
    name: Guild Owner
    target: "#guild_owner"
    grant:
      - config
      - permissions

  - id: music_master
    name: Music Master

    # Inherit all permissions from the specified role.
    base: active
    grant:
      - queue
      - player
      - summon

    # An id must be specified in order to inherit from a role. If the id isn't set, it defaults to a random one.
    # While the name of a role may be changed, its id stays the same.
  - id: active
    name: Active Listener
    grant:
      - queue.add
      - playlist.create

# global roles are like superglobal roles only that they don't stand above guild roles.
# i.e. guild roles will take precedence over the global roles.
global_roles:
  - id: base_role
    name: Base
    target: "#everyone"
    grant:
      - queue.inspect
      - webiesela